# This file has been autogenerated by the pywayland scanner

# SPDX-FileCopyrightText: 2015 Martin Gräßlin
#
# SPDX-License-Identifier: LGPL-2.1-or-later

from __future__ import annotations

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from ..wayland import WlOutput
from .org_kde_kwin_dpms import OrgKdeKwinDpms


class OrgKdeKwinDpmsManager(Interface):
    """Output dpms manager

    The Dpms manager allows to get a
    :class:`~pywayland.protocol.dpms.OrgKdeKwinDpms` for a given
    :class:`~pywayland.protocol.wayland.WlOutput`. The
    :class:`~pywayland.protocol.dpms.OrgKdeKwinDpms` provides the currently
    used VESA Display Power Management Signaling state (see
    https://en.wikipedia.org/wiki/VESA_Display_Power_Management_Signaling ). In
    addition it allows to request a state change. A compositor is not obliged
    to honor it and will normally automatically switch back to on state.
    """

    name = "org_kde_kwin_dpms_manager"
    version = 1


class OrgKdeKwinDpmsManagerProxy(Proxy[OrgKdeKwinDpmsManager]):
    interface = OrgKdeKwinDpmsManager

    @OrgKdeKwinDpmsManager.request(
        Argument(ArgumentType.NewId, interface=OrgKdeKwinDpms),
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def get(self, output: WlOutput) -> Proxy[OrgKdeKwinDpms]:
        """Get :class:`~pywayland.protocol.dpms.OrgKdeKwinDpms` for :class:`~pywayland.protocol.wayland.WlOutput`

        Factory request to get the
        :class:`~pywayland.protocol.dpms.OrgKdeKwinDpms` for a given
        :class:`~pywayland.protocol.wayland.WlOutput`.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        :returns:
            :class:`~pywayland.protocol.dpms.OrgKdeKwinDpms`
        """
        id = self._marshal_constructor(0, OrgKdeKwinDpms, output)
        return id


class OrgKdeKwinDpmsManagerResource(Resource):
    interface = OrgKdeKwinDpmsManager


class OrgKdeKwinDpmsManagerGlobal(Global):
    interface = OrgKdeKwinDpmsManager


OrgKdeKwinDpmsManager._gen_c()
OrgKdeKwinDpmsManager.proxy_class = OrgKdeKwinDpmsManagerProxy
OrgKdeKwinDpmsManager.resource_class = OrgKdeKwinDpmsManagerResource
OrgKdeKwinDpmsManager.global_class = OrgKdeKwinDpmsManagerGlobal
