# This file has been autogenerated by the pywayland scanner

# SPDX-FileCopyrightText: 2008-2011 Kristian Høgsberg
# SPDX-FileCopyrightText: 2010-2011 Intel Corporation
# SPDX-FileCopyrightText: 2012-2013 Collabora, Ltd.
# SPDX-FileCopyrightText: 2015 Sebastian Kügler <sebas@kde.org>
#
# SPDX-License-Identifier: MIT-CMU

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)


class OrgKdeKwinOutputdevice(Interface):
    """Output configuration representation

    An outputdevice describes a display device available to the compositor.
    outputdevice is similar to wl_output, but focuses on output configuration
    management.

    A client can query all global outputdevice objects to enlist all available
    display devices, even those that may currently not be represented by the
    compositor as a wl_output.

    The client sends configuration changes to the server through the
    outputconfiguration interface, and the server applies the configuration
    changes to the hardware and signals changes to the outputdevices
    accordingly.

    This object is published as global during start up for every available
    display devices, or when one later becomes available, for example by being
    hotplugged via a physical connector.
    """

    name = "org_kde_kwin_outputdevice"
    version = 4

    class subpixel(enum.IntEnum):
        unknown = 0
        none = 1
        horizontal_rgb = 2
        horizontal_bgr = 3
        vertical_rgb = 4
        vertical_bgr = 5

    class transform(enum.IntEnum):
        normal = 0
        transform_90 = 1
        transform_180 = 2
        transform_270 = 3
        flipped = 4
        flipped_90 = 5
        flipped_180 = 6
        flipped_270 = 7

    class mode(enum.IntEnum):
        current = 0x1
        preferred = 0x2

    class enablement(enum.IntEnum):
        disabled = 0
        enabled = 1

    class capability(enum.IntFlag):
        overscan = 1
        vrr = 2

    class vrr_policy(enum.IntEnum):
        never = 0
        always = 1
        automatic = 2


class OrgKdeKwinOutputdeviceProxy(Proxy[OrgKdeKwinOutputdevice]):
    interface = OrgKdeKwinOutputdevice


class OrgKdeKwinOutputdeviceResource(Resource):
    interface = OrgKdeKwinOutputdevice

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.String),
        Argument(ArgumentType.String),
        Argument(ArgumentType.Int),
    )
    def geometry(self, x: int, y: int, physical_width: int, physical_height: int, subpixel: int, make: str, model: str, transform: int) -> None:
        """Geometric properties of the output

        The geometry event describes geometric properties of the output. The
        event is sent when binding to the output object and whenever any of the
        properties change.

        :param x:
            x position within the global compositor space
        :type x:
            `ArgumentType.Int`
        :param y:
            y position within the global compositor space
        :type y:
            `ArgumentType.Int`
        :param physical_width:
            width in millimeters of the output
        :type physical_width:
            `ArgumentType.Int`
        :param physical_height:
            height in millimeters of the output
        :type physical_height:
            `ArgumentType.Int`
        :param subpixel:
            subpixel orientation of the output
        :type subpixel:
            `ArgumentType.Int`
        :param make:
            textual description of the manufacturer
        :type make:
            `ArgumentType.String`
        :param model:
            textual description of the model
        :type model:
            `ArgumentType.String`
        :param transform:
            transform that maps framebuffer to output
        :type transform:
            `ArgumentType.Int`
        """
        self._post_event(0, x, y, physical_width, physical_height, subpixel, make, model, transform)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Uint),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
    )
    def mode(self, flags: int, width: int, height: int, refresh: int, mode_id: int) -> None:
        """Advertise available output modes and current one

        The mode event describes an available mode for the output.

        When the client binds to the outputdevice object, the server sends this
        event once for every available mode the outputdevice can be operated
        by.

        There will always be at least one event sent out on initial binding,
        which represents the current mode.

        Later on if an output changes its mode the event is sent again, whereby
        this event represents the mode that has now become current. In other
        words, the current mode is always represented by the latest event sent
        with the current flag set.

        The size of a mode is given in physical hardware units of the output
        device. This is not necessarily the same as the output size in the
        global compositor space. For instance, the output may be scaled, as
        described in :func:`OrgKdeKwinOutputdevice.scale()`, or transformed, as
        described in :func:`OrgKdeKwinOutputdevice.transform()`.

        The id can be used to refer to a mode when calling set_mode on an
        org_kde_kwin_outputconfiguration object.

        :param flags:
            bitfield of mode flags
        :type flags:
            `ArgumentType.Uint`
        :param width:
            width of the mode in hardware units
        :type width:
            `ArgumentType.Int`
        :param height:
            height of the mode in hardware units
        :type height:
            `ArgumentType.Int`
        :param refresh:
            vertical refresh rate in mHz
        :type refresh:
            `ArgumentType.Int`
        :param mode_id:
            Per outputdevice unique id to identify a mode
        :type mode_id:
            `ArgumentType.Int`
        """
        self._post_event(1, flags, width, height, refresh, mode_id)

    @OrgKdeKwinOutputdevice.event()
    def done(self) -> None:
        """Sent all information about output

        This event is sent after all other properties have been sent on binding
        to the output object as well as after any other output property change
        have been applied later on. This allows to see changes to the output
        properties as atomic, even if multiple events successively announce
        them.
        """
        self._post_event(2)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Int),
    )
    def scale(self, factor: int) -> None:
        """Output scaling properties

        This event contains scaling geometry information that is not in the
        geometry event. It may be sent after binding the output object or if
        the output scale changes later. If it is not sent, the client should
        assume a scale of 1.

        A scale larger than 1 means that the compositor will automatically
        scale surface buffers by this amount when rendering. This is used for
        high resolution displays where applications rendering at the native
        resolution would be too small to be legible.

        It is intended that scaling aware clients track the current output of a
        surface, and if it is on a scaled output it should use
        wl_surface.set_buffer_scale with the scale of the output. That way the
        compositor can avoid scaling the surface, and the client can supply a
        higher detail image.

        :param factor:
            scaling factor of output
        :type factor:
            `ArgumentType.Int`
        """
        self._post_event(3, factor)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.String),
    )
    def edid(self, raw: str) -> None:
        """Advertise edid data for the output

        The edid event encapsulates the EDID data for the outputdevice.

        The event is sent when binding to the output object. The EDID data may
        be empty, in which case this event is sent anyway. If the EDID
        information is empty, you can fall back to the name et al. properties
        of the outputdevice.

        :param raw:
            base64-encoded EDID string
        :type raw:
            `ArgumentType.String`
        """
        self._post_event(4, raw)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Int),
    )
    def enabled(self, enabled: int) -> None:
        """Output is enabled or disabled

        The enabled event notifies whether this output is currently enabled and
        used for displaying content by the server. The event is sent when
        binding to the output object and whenever later on an output changes
        its state by becoming enabled or disabled.

        :param enabled:
            output enabled state
        :type enabled:
            `ArgumentType.Int`
        """
        self._post_event(5, enabled)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.String),
    )
    def uuid(self, uuid: str) -> None:
        """A unique id for this outputdevice

        The uuid can be used to identify the output. It's controlled by the
        server entirely. The server should make sure the uuid is persistent
        across restarts. An empty uuid is considered invalid.

        :param uuid:
            output devices ID
        :type uuid:
            `ArgumentType.String`
        """
        self._post_event(6, uuid)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Fixed),
        version=2,
    )
    def scalef(self, factor: float) -> None:
        """Output scaling properties

        This event contains scaling geometry information that is not in the
        geometry event. It may be sent after binding the output object or if
        the output scale changes later. If it is not sent, the client should
        assume a scale of 1.

        A scale larger than 1 means that the compositor will automatically
        scale surface buffers by this amount when rendering. This is used for
        high resolution displays where applications rendering at the native
        resolution would be too small to be legible.

        It is intended that scaling aware clients track the current output of a
        surface, and if it is on a scaled output it should use
        wl_surface.set_buffer_scale with the scale of the output. That way the
        compositor can avoid scaling the surface, and the client can supply a
        higher detail image.

        wl_output will keep the output scale as an integer. In every situation
        except configuring the window manager you want to use that.

        :param factor:
            scaling factor of output
        :type factor:
            `ArgumentType.Fixed`
        """
        self._post_event(7, factor)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Array),
        Argument(ArgumentType.Array),
        Argument(ArgumentType.Array),
        version=2,
    )
    def colorcurves(self, red: list, green: list, blue: list) -> None:
        """Output color curves

        Describes the color intensity profile of the output. Commonly used for
        gamma/color correction.

        The array contains all color ramp values of the output. For example on
        8bit screens there are 256 of them.

        The array elements are unsigned 16bit integers.

        :param red:
            red color ramp
        :type red:
            `ArgumentType.Array`
        :param green:
            green color ramp
        :type green:
            `ArgumentType.Array`
        :param blue:
            blue color ramp
        :type blue:
            `ArgumentType.Array`
        """
        self._post_event(8, red, green, blue)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.String),
        version=2,
    )
    def serial_number(self, serialNumber: str) -> None:
        """Serial number

        Serial ID of the monitor, sent on startup before the first done event.

        :param serialNumber:
            textual representation of serial number
        :type serialNumber:
            `ArgumentType.String`
        """
        self._post_event(9, serialNumber)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.String),
        version=2,
    )
    def eisa_id(self, eisaId: str) -> None:
        """Eisa id

        EISA ID of the monitor, sent on startup before the first done event.

        :param eisaId:
            textual representation of EISA identifier
        :type eisaId:
            `ArgumentType.String`
        """
        self._post_event(10, eisaId)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Uint),
        version=3,
    )
    def capabilities(self, flags: int) -> None:
        """Capability flags

        What capabilities this device has, sent on startup before the first
        done event.

        :param flags:
        :type flags:
            `ArgumentType.Uint`
        """
        self._post_event(11, flags)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Uint),
        version=3,
    )
    def overscan(self, overscan: int) -> None:
        """Overscan

        Overscan value of the monitor in percent, sent on startup before the
        first done event.

        :param overscan:
            amount of overscan of the monitor
        :type overscan:
            `ArgumentType.Uint`
        """
        self._post_event(12, overscan)

    @OrgKdeKwinOutputdevice.event(
        Argument(ArgumentType.Uint),
        version=4,
    )
    def vrr_policy(self, vrr_policy: int) -> None:
        """Variable refresh rate policy

        What policy the compositor will employ regarding its use of variable
        refresh rate.

        :param vrr_policy:
        :type vrr_policy:
            `ArgumentType.Uint`
        """
        self._post_event(13, vrr_policy)


class OrgKdeKwinOutputdeviceGlobal(Global):
    interface = OrgKdeKwinOutputdevice


OrgKdeKwinOutputdevice._gen_c()
OrgKdeKwinOutputdevice.proxy_class = OrgKdeKwinOutputdeviceProxy
OrgKdeKwinOutputdevice.resource_class = OrgKdeKwinOutputdeviceResource
OrgKdeKwinOutputdevice.global_class = OrgKdeKwinOutputdeviceGlobal
